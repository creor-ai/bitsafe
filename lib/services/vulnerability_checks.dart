import '../models/transaction.dart';
import '../models/address_details.dart';

class VulnerabilityChecks {
  // Check for address reuse
  static void checkAddressReuse(List<Transaction> transactions, AddressDetails details) {
    var seenAddresses = <String>{};
    bool hasReuse = false;

    for (var transaction in transactions) {
      for (var input in transaction.inputs) {
        if (!seenAddresses.add(input.address) && input.address == details.address) {
          hasReuse = true;
          break;
        }
      }
      for (var output in transaction.outputs) {
        if (!seenAddresses.add(output.address) && output.address == details.address) {
          hasReuse = true;
          break;
        }
      }
      if (hasReuse) break;
    }

    details.updateAddressReuse(hasReuse);
  }

  // Check for dust transactions
  static void checkDustTransactions(List<Transaction> transactions, AddressDetails details) {
    bool hasDustTransactions = transactions.any((transaction) => transaction.outputs.any((output) => output.address == details.address && output.amount < 0.00001));

    details.updateDustTransactions(hasDustTransactions);
  }

  // Check for unusual patterns (e.g., high transaction volumes)
  static void checkUnusualPatterns(List<Transaction> transactions, AddressDetails details) {
    bool hasUnusualPatterns = transactions.any((transaction) => transaction.outputs.any((output) => output.amount > 10 // Arbitrary amount for unusual high output
        ));

    details.updateUnusualPatterns(hasUnusualPatterns);
  }

  // A method to run all checks
  static void runAllChecks(List<Transaction> transactions, AddressDetails details, List<String> knownBadAddresses) {
    checkAddressReuse(transactions, details);
    checkDustTransactions(transactions, details);
    checkUnusualPatterns(transactions, details);
    // Add any additional checks as necessary
  }
}
